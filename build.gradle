
buildscript {
   repositories {
       mavenCentral()
   }
   dependencies {
       classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.8.RELEASE")
   }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

eclipse {
   classpath {
      downloadSources=true
   }
}

repositories {
   jcenter()
   mavenCentral()
}

dependencies {
   compile 'log4j:log4j:1.2.17'
   compile 'commons-logging:commons-logging:1.1.3'
   
   compile('org.springframework.boot:spring-boot-starter-web:1.3.3.RELEASE') {
      exclude module: 'spring-boot-starter-tomcat'
      exclude module: 'spring-boot-starter-logging'
      exclude module: 'spring-boot-starter-log4j'
      exclude module: 'logback-classic'
      exclude module: 'hibernate-validator'
   }
   compile('org.springframework.boot:spring-boot-starter-jetty:1.3.3.RELEASE') {
      exclude module: 'websocket-server'
      exclude module: 'javax-websocket-server-impl'
   }
   
   testCompile 'junit:junit:4.12'
}

task info(description:'Use information about project (' + project.name + ')') {
   doLast {
      // https://docs.gradle.org/current/dsl/org.gradle.api.Project.html
      println '-----> user.home               : ' + System.properties['user.home']
      println '-----> project.name            : ' + project.name
      println '-----> project.version         : ' + project.version
      println '-----> project.projectDir      : ' + project.projectDir
      println '-----> project.buildDir        : ' + project.buildDir
      // not indented for visual formatting
      if(project.plugins.hasPlugin('java')) {
      println '-----> (java) archivesBaseName : ' + archivesBaseName
      println '-----> (java) jar.archivePath  : ' + jar.archivePath
      println '-----> (java) libsDir          : ' + libsDir
      println '-----> (java) libsDirName      : ' + libsDirName
      println '-----> (java) distsDir         : ' + distsDir
      println '-----> (java) distsDirName     : ' + distsDirName
      }
   }
}

task cleanAll(description: 'Clean all generated artifacts', dependsOn:['clean']) {
   doLast {
      delete 'logs'
   }
}

